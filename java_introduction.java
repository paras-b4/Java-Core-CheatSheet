/*
 1. why java is so famous ?
 when you seen top 5 programing language you find java there may be at 1 or 4 place but java is always there 
 java has multiple features which helps to be use in enterprice market , web development , android development and 
 most of the companies use java as there prefered language .

 # Features of java 
 -java is always within top 5 language list 
 -In every 6 month minor updates of java released  
 -Easy to read 
 -Maintainable 
 -Follow WORA (write once read anywhere) concept
 -OOPs Language 
 -Multithreading 
 -has collection api
 -exception handling 
 -java is platform independent 
 
 # JVM
 The JVM is a virtual machine that runs Java bytecode. It is responsible for interpreting and executing Java bytecode instructions,
 which are generated by the Java compiler from your Java source code.

 # JRE
 The JRE is a package of software that includes the JVM along with libraries and other components needed to run Java applications.

 The JRE provides the necessary environment for the JVM to run Java programs by including essential class libraries (such as java.lang, java.util, etc.), along with other resources such as configuration files.

 -> In java we have a technology there called JVM java virtual machine if you are working on kotlin , scala , groovy 
 ultimately you are working on java technology .

 -> if you know java core it is easier to jump on different languages .No matter for what interview you are going/preparing for they ask java questions because most of the interview question are based on java.
 beacuse they think if you know core java that means you every thing .

 2.History of java
 -java language first realeased by son microsystem in 1995 .
 -But after that oracle brought the sun microsystem .

 3 Variables 
 -variable is a type of container in which we store values and attach a type with it. Type describes the type of value like no,text,image . 
 -java is a strongly typed language which means we have to mention the type to it for its identification .

 4 DataTypes
 -Datatype is used to describe the type of value/data store in a variable .

 Datatype are categories into primitive and non primitive datatype .
 -primitive datatype are simple and pre-define type like Integer,Float,Character,Boolean .
 these are the most basic building block for data manipulation .

 types of primitive datatype
 - Every type have different size to it .
 1. Integer= byte (1 bytes),short (2 bytes),int (4 bytes),long(8 bytes) 
 2.Float = float(4 bytes) , doubles(8 bytes)
 float vs double
 double have more precision than float by default java support double.
 3.character = char(2 byetes) ( it represents the single letter enclosed inside the single quorts )
 4 Boolean = Boolean it can be either true or false .
 
 -NoN Primitive datatype are more complex and user defined datatype and more sophisticated structure ex:- string ,class,interface,Arrays
 non primitive datatype are also known as refrence type.

 5. what is literals ?
 -literal is a source code representation of a fixed value eg:- 20000l represent long type of integers , 20.5f represents float 
 
 their are many ways to represent integer using literal 

 a.decimal
 - int num =10 ,int num=10004.
  here literal in decimal must start with 10
  Decimal literals do not have to start with 10. They can be any sequence of digits (0â€“9), as long as they follow valid syntax for a decimal number.

 b.binary
 -int num=0b1010
 here literal in binary must start with 0b or 0B

 c.octal
 int num=0123;
 literal in octal must start with 0.

 d.Hexadecimal
 -int num =0x138
 -literal in hexadecimal must start with 0x or 0X .


 6. what is type conversion and type casting ?
 -type conversion or type casting is the process of converting a value from one datatype to another datatype .

 Different ways to casting 
 1. Implicit type casting (also called type conversion)
 it is done by the compiler automatically 

 2. Explicit type casting (also called type casting )
 it is done by the user manually .
 
 7. Class and Objects
 -java is an Object oriented programing language .
 In real world every things is an object 
 -Every object has two things 
 -1. An obejct know somthing (it has its property)
 -2. Am object does somthing (its behaviour )

 To create an object first we need to create a class .class is a blueprint contains the designing of an object .
 In a class we have method and variable .
 class does not occupy memory . 

 8. Stack and Queue
 -In java we are managing our memory using two data structure stack and heap .
 In java every method has its own stack and stack contains local variable that are declared inside the method, refrence variable etc.
 -Reference variable stored inside the main methods stack and it refers to the object inside the heap memory.
 -object is created inside heap memory and instance variable are stored in heap. heap also contain method name .   

 9.Arrays

 Arrays = An Array is a collection of similar type of data and store in contagious memory ( in contagious memory allocation we store file in continious mammer  types of contagious memory location are 1.fixed partation and variable partation ) 
 1.Why we need arrays ?
 - if you want to store multiple values inside a particular variable than we use array
 Syntax for creating an array :-
 1.Dynamic Array  // by default all the value are zero.
 int num[] = new int[10];
 
 2.Static Array // In this we are adding values manually .
 int num[]={4,5,7,8};
 
 Drawback of array
 
 -Array is an object 
 -Fixed size = size of an array is fixed
 -Insertion and deletion = in case of inserting an element into an array require moving each elements from its original location to the new available slot .
 -single data type = arrays are designed to store elements of the same type .
 -memory waste = if you allocate an array that is larger than needed.
 
 ques difference between size and length ?
 
 - length = The fixed capacity of arrays or the number of elements an array can hold.
 - size = The number of elements currently stored in dynamic collections like ArrayList, HashSet, etc.
 
 ques difference between == and .equals to ?
 
 -(==) = Compares the memory references of two objects (i.e., whether they point to the same memory location).
 -(.equals to) = Compares the contents (or values) of two objects.
 
 
 10.Enhanced for loop ( Read Only Operation )
 
 -enhanced for loop can be used in array and collection to iterate the object .
 -Read-Only Operations
 
 11.Strings 
 
  String = String is a sequence of character enclosed in double quorts. string is a non-primitive data type.
 -By default String is Immutable .
 -String is a class . we can perform operation on it  ex:- charAt(0), length() concat("paras").
 syntax :- // below syntax have different memory location .
 1.String str="paras"; // here "paras" store in string constant pool inside the heap memory
 2.String str=new String("paras");   //here "paras" is stored in heap memory object and str is a refrence variable refer to that object.
 
 11. StringBuffer and StringBuilder 
 
  We can create mutable string with the heip of StringBuilder and StringBuffer classes .
 StringBuilder and StringBuffer class have different method ex:- append(), capacity() by default 16 , length(),insert(index,value),deletechar().
 we can also convert StringBuilder into String by using ToString method() .
 
 -Difference between StringBuffer and StringBuilder is that stringBuilder is thread safe where StringBuffer is not .
 
 12.Encapsulation 
 
 Encapsulation = Binding of data with method to make your program secure from outside world .
 -we can access data only in the class in which it is declare .
 -We can achive encapsulation through access specifier (private). and using setter getter method we can set and get values of variable .
 
 benifits of encapsulation:-
 1.helpful in achieving abstraction .
 2.for security point of view it is most benifitial .  
 
 13. This keyword
 
 ---> Keywords are reserved words that has special meaning to it and it is understandable by the compiler .
 -This keyword represents the current object. current object ia an object which is calling the method 
 This keyword is used to differentiate between instance variable and local variable .
 
 14.Constructor 
 
 Constructor is a special method having name as that of class name .
 -it does not have any return type or even void .
 -it execute automaticaly when an object is created .
  1.Types of constructor :-
 -Parametrized constructor
 -Default constructor .
 
 15.Inheritance 
 
 -inheritance is a mechanism that allow one class to inherit the property and feature of another class . 
 -base class -> the class whose properties and features are being inhertied .
 -derived class -> the class who inherits the properties and feature of base class .
 
 # Need of Inheritance ?
 -The main aim of inheritance is to implements the concept of reusability which saves time and resource and also creating better connection between classes .and achieving method overriding .
 
 why java does not supports multiple inheritance ?
 Java does not support multiple inheritance through classes to maintain simplicity and prevent the complexity and ambiguity that can arise from it, 
 
 16. This and Super Constructor
 
 -Every constructor in java has a method even if you do not mention it. by default it is there and that is super() method .
 -super() method call the constructor of superclass . if you pass an agrument in super() method then it will call the parametrized constructor .
 -this method call the constructor of the same class . 
 
 17. Polymorphism 

  polymorphism is the ability of any data to be processed in more than one form .
 -Types of polymorphism
 1.Runtime polymorphism
 2.compile time polymorphism
 
 18. Final Keyword
 
  Final keyword is used to create constant . we cannot change the value of final keyword 
 -Also if we declare a class as final than we cannot inherits/extends that class
 -If we create method as final then we cannot override that methdo .
 
 =Final Keyword is used to create constant variable( Not changeable ) , method( Not overrideable ) or class ( Not extendable )  
 
 -if we create a class final then it cannot be extended
 
 19. Abstraction 

  Abstraction is a process of hiding the implementation details and showing only functionality to the user 
 -Abstract Class 
 -Abstract class is a ristricted class . we can not create an object of it 
 -Abstract class consist of both abstarct as well as non abstract method . but abstract method can only be defined in abstract class . 
 
 20. Inner class
 -Inner class means class inside the class .
 
 21. Interface 

 -Interface simply define a set of method but does not implement them 
 -A class that implements the interface compulsery to define all the method that are declare in that interface .
 -Interface is a collection of method declaration .
 Ex of interface are Clonable,serializable interface .
 
 22. Wrapper class 

  wrapper class in java is a class whose object wraps or contains the primitive data type .
  Every primitive data type have a corresponding Wrapper class .
  
 23. Lambda expression 

 Lambda expressions are used to implement functional interfaces (interfaces that have exactly one abstract method).
 They allow you to write concise, anonymous implementations of such interfaces.
 
 -Key Limitations of Lambda Expressions:
 1. Cannot Use with Non-Functional Interfaces .
 
 2. Cannot Be Used Directly with Abstract Classes 
  
 24. Exception Handling .

 Exception is an unexpected event that may occur during the execution of a program that disturbes the normal flow of a program instruction .
 Types of error 
 1.compile time error are those error that occur during the compilation of the java code . ex -> missing semi-colan , syntax error .
 2.runtime time error are those error that occur during the runing of the code .( Also called exception ) .
 3.Logical error are those error that occur when the program run successfully but does not produce the expected output .
 
 -we can handle exception through the use of try and catch block .
 
 25. Thread and MultiThreadiing .

 -Thread is a light weight and smallest unit of a task .
 -Threads are useful when you want to execute multiple task at the same time .

 -os support multiple software working at the same time thats mean it support multitasking .
 -multitasking is the ability of the cpu to perform multiple task at the same time .
 -cpu has a concept of time sharing which means each process run for short period of time .
 -All thread cannot run at the same time so thread go for time sharing .

 -we have to use start() method to start the execution of a new thread . only start() method can call the run() method 

 26. Race Condition 

- Race condition is a condition in which critical section of a program is executed by two or more threads.
-use of thread and mutation at the same time is not good as it create instability in the code .
-synchronization helps to prevent race condition .
- join() method allow main() method to wait for other threads to come back and join .
* Thread safe
-Thread safe means only one thread work at one point .

27. Collection framework .

 FrameWork is a set of class and interface which provides a ready-made architecture . 
-Any group of individual object which are represented as a single unit is known as the collection of object 
-collection is used to store multiple values .
-Array is also used to store multiple values but it is not used in dynamic programing .
-Collection API = where you can work with all data structure by using some in-build classes .
Collection is an interface and Collections is a class .

- List is an interface that is implemented by ArrayList,LinkedList,Vector,Stack. it can be defined as an ordered collection of object .
it allows duplicate value/object to store .  
- ArrayList use dynamic array to store the object .the arraylist class maintain the insertion order and is non synchronized .
-LinkedList use doubleyLinkedList to store the object .it maintain the insertion order and is synchronized
-vectors use dynamic array to store elements .it maintains the insertion order and is synchronised
-Stack maintains LIFO principle .it is a subClass of vector .
-Queue maintains FIFO principle . it is an ordered list that holds the elements which are about to processed .
-Set is an interface that is implemented by HashSet,TreeSet. it is an unordered collection of element . it doesnot allow duplicate value 
it doesnot support indexing .

// Map is a collection of key value pair for every value of an element a key is associated with it 
// Map itself is an interface that support key-value pairs. a class that implements Mapis called HashMap .
// In map we can fetch value form it by using the key and we get value .
// we can add elements in a map using the put() method
// keys are unique but values can be repeated . the vaue can be updated
// In map keys are in set while values are in list .


*/

class Paras{
    public static void main(String[] args) {
        System.out.println("hello paras how are you");
    }
}

